const int LEDRed = 13;
const int LEDGreen = 11;
const int LEDBlue = 10;
const int LEDRed1 = 8;
const int LEDRed2 = 6;
const int LEDRed3 = 3;
const int LEDRed4 = 0;
bool LEDRPow1=false;
bool LEDRPow2=false;
bool LEDRPow3=false;
bool LEDRPow4=false;

const int analogPin = 0;
int x = 5;
int oldBAC = 0;
long previousMillis = 0;

#include <CurieBLE.h>

BLEPeripheral blePeripheral;
BLEService sensorService("00001101-0000-1000-8000-00805F9B34FB");

BLEUnsignedIntCharacteristic dataCharistic("00001101-0000-1000-8000-00805F9B34FB", BLERead | BLEWrite | BLENotify);


void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(LEDRed, OUTPUT);
  pinMode(LEDGreen, OUTPUT);
  pinMode(LEDBlue, OUTPUT);
  pinMode(LEDRed1, OUTPUT);
  pinMode(LEDRed2, OUTPUT);
  pinMode(LEDRed3, OUTPUT);
  pinMode(LEDRed4, OUTPUT);
  blePeripheral.setLocalName("Breathalyzer");
  blePeripheral.setAdvertisedServiceUuid(sensorService.uuid());

  blePeripheral.addAttribute(sensorService);
  blePeripheral.addAttribute(dataCharistic);

  

  dataCharistic.setValue(0);
  blePeripheral.begin();
  
digitalWrite(LEDGreen, HIGH);
}

void loop() {

  BLECentral central = blePeripheral.central();
  
 

  // if a central is connected to peripheral:
  if (central) {
    Serial.print("Connected to central: ");
    //print the central's MAC address:
    Serial.println(central.address());
    
/* int sensorReading = analogRead(analogPin);
Serial.println(sensorReading);
*/
//
    while (central.connected()) {
      digitalWrite(LEDBlue, HIGH);
      digitalWrite(LEDGreen, LOW);
      
      long currentMillis = millis();
      // if 200ms have passed, check the heart rate measurement:
      if (currentMillis - previousMillis >= 100) {
        previousMillis = currentMillis;
        updateBreathSensor();
      }
        
      
 int sensorReading = analogRead(analogPin);
 lights(sensorReading, LEDRPow1, LEDRPow2, LEDRPow3, LEDRPow4);
    }
  }else{
    Serial.println("Not connected to central: ");
    digitalWrite(LEDRed, LOW);
    digitalWrite(LEDBlue, LOW);
    digitalWrite(LEDGreen, HIGH);
   int sensorReading = analogRead(analogPin);
      // Serial.println(sensorReading );

   lights(sensorReading,LEDRPow1,LEDRPow2,LEDRPow3,LEDRPow4);
              
  }


 

}

void lights(int sensorIn, bool a, bool b, bool c, bool d){
 
  if (sensorIn > 150) {
              a=true;
            }else{a=false;}

            if(sensorIn > 400)
            {
              b=true;
            }else{b=false;}

            if(sensorIn >650)
            {
              c=true;
            }else{c=false;}

            if(sensorIn >900)
            {
              d=true;
            }else{d=false;}

            if(a){
              digitalWrite(LEDRed1, HIGH);
              if(b){
                delay(25);digitalWrite(LEDRed2, HIGH);
                if(c){
                  delay(25);digitalWrite(LEDRed3, HIGH);
                  if(d){
                    delay(25);digitalWrite(LEDRed4, HIGH);
                    }else{digitalWrite(LEDRed4, LOW);}
                  }else{delay(25);digitalWrite(LEDRed3, LOW);}
                }else{delay(25);digitalWrite(LEDRed2, LOW);}
              }else{delay(25);digitalWrite(LEDRed1, LOW);}
delay(25);
}


void updateBreathSensor() {
  /* Read the current voltage level on the A0 analog input pin.
     This is used here to simulate the heart rate's measurement.
  */
  
  int BAC = analogRead(A0);
  if (BAC != oldBAC) {      // if the heart rate has changed
    Serial.print("Breath Rate (0-1023) Sent is: "); // print it
    Serial.println(BAC);
   dataCharistic.setValue(BAC);  // and update the heart rate measurement characteristic
    oldBAC = BAC;           // save the level for next comparison
  }
}
/*
      // the pin that the potentiometer is attached to
  const int ledCount = 10;    // the number of LEDs in the bar graph

  int ledPins[] = {
  10,9,8,7,6,5,4,3,2,1 // Here we have the number of LEDs to use in the BarGraph
  };


  void setup() {

  for (int thisLed = 0; thisLed < ledCount; thisLed++) {
    pinMode(ledPins[thisLed], OUTPUT);
  }}

  void loop() {
  //This is the code to light up LED's
  int sensorReading = analogRead(analogPin);

  int ledLevel = map(sensorReading, 500, 1023, 0, ledCount);


  for (int thisLed = 0; thisLed < ledCount; thisLed++) {

    if (thisLed < ledLevel) {
      digitalWrite(ledPins[thisLed], HIGH);
    }

    else {
      digitalWrite(ledPins[thisLed], LOW);
    }  }}

*/